from flask import Flask, request, render_template_string
import threading
from datetime import datetime, timedelta
from multi_agent_runner import run_agent_workflow, schedule_daily_email_report, run_scheduler, send_email_notification, extract_dual_query_parameters

app = Flask(__name__)

def get_current_and_future_hours():
    """Generate current hour and future hours for time selection."""
    now = datetime.now()
    current_hour = now.hour
    
    # Create list of future hours for today (from current hour onwards)
    today_hours = []
    for hour in range(current_hour, 24):
        time_str = f"{hour:02d}:00"
        display_str = f"{hour:02d}:00 (Today)"
        today_hours.append((time_str, display_str))
    
    # Create list of all hours for tomorrow
    tomorrow_hours = []
    for hour in range(0, 24):
        time_str = f"{hour:02d}:00"
        display_str = f"{hour:02d}:00 (Tomorrow)"
        tomorrow_hours.append((time_str, display_str))
    
    return today_hours, tomorrow_hours

# --- HTML Template ---
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Running Weather Advisor</title>
    <style>
        body { font-family: Arial, sans-serif; background-color: #f4f7f6; margin: 0; padding: 20px; color: #333; }
        .container { max-width: 800px; margin: 40px auto; background: #fff; padding: 30px; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; text-align: center; }
        .form-group { margin-bottom: 20px; }
        .time-windows { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }
        .time-window-box { border: 2px solid #3498db; border-radius: 8px; padding: 15px; background: #f8f9fa; }
        .time-window-box h3 { margin: 0 0 15px 0; color: #3498db; font-size: 18px; text-align: center; }
        label { display: block; margin-bottom: 8px; font-weight: bold; color: #555; }
        input[type="text"], input[type="email"], input[type="time"], select {
            width: 100%; padding: 12px; border-radius: 5px; border: 1px solid #ccc; box-sizing: border-box;
        }
        select { background: white; }
        .time-input-group { display: flex; gap: 10px; align-items: center; }
        .time-input-group select { flex: 1; }
        .time-input-group span { font-weight: bold; color: #666; white-space: nowrap; }
        .button-group { display: flex; justify-content: space-between; gap: 15px; margin-top: 25px; }
        button {
            flex-grow: 1; background-color: #3498db; color: white; padding: 15px; border: none; border-radius: 5px;
            cursor: pointer; font-size: 16px; transition: background-color 0.3s;
        }
        button[name="action-schedule"] { background-color: #f39c12; }
        button[name="action-email-now"] { background-color: #2ecc71; }
        button:hover { opacity: 0.9; }
        .message {
            padding: 15px; margin-top: 25px; border-radius: 5px; text-align: center; font-weight: bold;
        }
        .message.success { background-color: #d4edda; color: #155724; }
        .message.info { background-color: #d1ecf1; color: #0c5460; }
        hr { border: 0; border-top: 1px solid #eee; margin: 30px 0; }
        .report-container { margin-top: 20px; }
        .info-box {
            background: #e8f4fd; border: 1px solid #bee5eb; color: #0c5460; padding: 15px; margin: 15px 0; border-radius: 8px;
        }
        .info-box h4 { margin: 0 0 10px 0; color: #0a4b54; }
        .current-time { 
            text-align: center; padding: 10px; background: #f8f9fa; border-radius: 5px; margin-bottom: 20px; 
            color: #495057; font-weight: bold;
        }
        @media (max-width: 768px) {
            .time-windows { grid-template-columns: 1fr; }
        }
    </style>
    <script>
        // Update current time every second
        function updateCurrentTime() {
            const now = new Date();
            const timeStr = now.toLocaleTimeString();
            const dateStr = now.toLocaleDateString();
            document.getElementById('current-time').innerHTML = `Current Time: ${dateStr} ${timeStr}`;
        }
        
        // Validate time selection on form submission
        function validateTimes() {
            const todayStart = document.querySelector('select[name="today_start"]').value;
            const todayEnd = document.querySelector('select[name="today_end"]').value;
            const tomorrowStart = document.querySelector('select[name="tomorrow_start"]').value;
            const tomorrowEnd = document.querySelector('select[name="tomorrow_end"]').value;
            
            // Convert time strings to numbers for comparison
            const todayStartHour = parseInt(todayStart.split(':')[0]);
            const todayEndHour = parseInt(todayEnd.split(':')[0]);
            const tomorrowStartHour = parseInt(tomorrowStart.split(':')[0]);
            const tomorrowEndHour = parseInt(tomorrowEnd.split(':')[0]);
            
            // Validate today's time window
            if (todayStartHour >= todayEndHour) {
                alert('Today: End time must be after start time.');
                return false;
            }
            
            // Validate tomorrow's time window  
            if (tomorrowStartHour >= tomorrowEndHour) {
                alert('Tomorrow: End time must be after start time.');
                return false;
            }
            
            return true;
        }
        
        window.onload = function() {
            updateCurrentTime();
            setInterval(updateCurrentTime, 1000);
        };
    </script>
</head>
<body>
    <div class="container">
        <h1>Running Weather Advisor</h1>
        
        <div id="current-time" class="current-time">Loading current time...</div>
        
        <div class="info-box">
            <h4>How It Works:</h4>
            <p>Select future time windows for today and tomorrow. The system will analyze weather conditions and recommend the best times to run within your preferred windows.</p>
        </div>
        
        <form method="post" onsubmit="return validateTimes()">
            <div class="form-group">
                <label for="city">City (e.g., Boston, MA)</label>
                <input type="text" id="city" name="city" required placeholder="Enter city and state">
            </div>
            
            <div class="time-windows">
                <div class="time-window-box">
                    <h3>ðŸ“… Today's Window</h3>
                    <div class="time-input-group">
                        <select name="today_start" required>
                            <option value="">Start Time</option>
                            {% for time_val, time_display in today_hours %}
                            <option value="{{ time_val }}" {% if time_val == default_today_start %}selected{% endif %}>{{ time_display }}</option>
                            {% endfor %}
                        </select>
                        <span>to</span>
                        <select name="today_end" required>
                            <option value="">End Time</option>
                            {% for time_val, time_display in today_hours %}
                            <option value="{{ time_val }}" {% if time_val == default_today_end %}selected{% endif %}>{{ time_display }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                
                <div class="time-window-box">
                    <h3>ðŸ“… Tomorrow's Window</h3>
                    <div class="time-input-group">
                        <select name="tomorrow_start" required>
                            <option value="">Start Time</option>
                            {% for time_val, time_display in tomorrow_hours %}
                            <option value="{{ time_val }}" {% if time_val == default_tomorrow_start %}selected{% endif %}>{{ time_display }}</option>
                            {% endfor %}
                        </select>
                        <span>to</span>
                        <select name="tomorrow_end" required>
                            <option value="">End Time</option>
                            {% for time_val, time_display in tomorrow_hours %}
                            <option value="{{ time_val }}" {% if time_val == default_tomorrow_end %}selected{% endif %}>{{ time_display }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label for="email">Your Email Address</label>
                <input type="email" id="email" name="email" required placeholder="your@email.com">
            </div>
            
            <div class="form-group">
                <label for="schedule_time">Daily Email Time (for scheduled reports)</label>
                <select name="schedule_time" required>
                    <option value="">Select Time</option>
                    {% for hour in range(24) %}
                    <option value="{{ '%02d:00'|format(hour) }}" {% if hour == 6 %}selected{% endif %}>
                        {{ '%02d:00'|format(hour) }} ({{ 'AM' if hour < 12 else 'PM' }})
                    </option>
                    {% endfor %}
                </select>
            </div>
            
            <div class="button-group">
                <button type="submit" name="action" value="get_forecast">Get Instant Forecast</button>
                <button type="submit" name="action" value="email_now">Email Forecast Now</button>
                <button type="submit" name="action" value="schedule">Schedule Daily Email</button>
            </div>
        </form>

        {% if message %}
            <div class="message {{ 'success' if 'Success' in message or 'sent' in message else 'info' }}">
                {{ message }}
            </div>
        {% endif %}
        
        {% if report_html %}
            <hr>
            <div class="report-container">
                {{ report_html | safe }}
            </div>
        {% endif %}
    </div>
</body>
</html>
"""

@app.route('/', methods=['GET', 'POST'])
def index():
    message = ""
    report_html = ""
    
    # Get available time options
    today_hours, tomorrow_hours = get_current_and_future_hours()
    
    # Set smart defaults
    now = datetime.now()
    current_hour = now.hour
    
    # Default today window: next available 4-hour block
    if current_hour < 20:  # If before 8PM, suggest evening window
        default_today_start = f"{current_hour + 1:02d}:00"
        default_today_end = f"{min(23, current_hour + 5):02d}:00"
    else:  # If late evening, no good today window available
        default_today_start = ""
        default_today_end = ""
    
    # Default tomorrow window: morning running window
    default_tomorrow_start = "06:00"
    default_tomorrow_end = "10:00"
    
    if request.method == 'POST':
        city = request.form['city']
        today_start = request.form['today_start']
        today_end = request.form['today_end']
        tomorrow_start = request.form['tomorrow_start']
        tomorrow_end = request.form['tomorrow_end']
        email = request.form['email']
        action = request.form['action']

        # Validate that we have at least one valid time window
        if not today_start and not tomorrow_start:
            message = "Please select at least one time window (today or tomorrow)."
        elif today_start and not today_end:
            message = "Please select an end time for today's window."
        elif tomorrow_start and not tomorrow_end:
            message = "Please select an end time for tomorrow's window."
        elif today_start and today_end and today_start >= today_end:
            message = "Today's end time must be after start time."
        elif tomorrow_start and tomorrow_end and tomorrow_start >= tomorrow_end:
            message = "Tomorrow's end time must be after start time."
        else:
            # Use defaults if one window is empty
            if not today_start:
                today_start = "00:00"
                today_end = "00:00" 
            if not tomorrow_start:
                tomorrow_start = "00:00"
                tomorrow_end = "00:00"
            
            try:
                if action == 'get_forecast':
                    report_html = run_agent_workflow(
                        city=city,
                        today_start=today_start,
                        today_end=today_end,
                        tomorrow_start=tomorrow_start,
                        tomorrow_end=tomorrow_end,
                        output_format="html"
                    )
                    message = "Forecast generated successfully!"
                
                elif action == 'email_now':
                    report_html = run_agent_workflow(
                        city=city,
                        today_start=today_start,
                        today_end=today_end,
                        tomorrow_start=tomorrow_start,
                        tomorrow_end=tomorrow_end,
                        output_format="html"
                    )
                    subject = f"Your Instant Running Forecast for {city}"
                    
                    # Create proper email HTML structure
                    email_html = f"""
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <style>
                            body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; background-color: #f9f9f9; }}
                            .email-container {{ max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }}
                            .email-content {{ padding: 0; }}
                            .email-footer {{ margin-top: 30px; padding: 20px; text-align: center; color: #666; background: #f5f5f5; }}
                        </style>
                    </head>
                    <body>
                        <div class="email-container">
                            <div class="email-content">
                                {report_html}
                            </div>
                            <div class="email-footer">
                                <p style="margin: 0;"><small>This is an automated report. Reply if you need assistance.</small></p>
                            </div>
                        </div>
                    </body>
                    </html>
                    """
                    
                    send_email_notification(
                        email,
                        subject,
                        email_html,
                        is_html=True
                    )
                    message = f"Forecast generated and sent to {email}!"
                    
                elif action == 'schedule':
                    schedule_time = request.form['schedule_time']
                    
                    # Call schedule_daily_email_report with the dual time windows
                    message = schedule_daily_email_report.invoke({
                        "city": city,
                        "today_start": today_start,
                        "today_end": today_end,
                        "tomorrow_start": tomorrow_start,
                        "tomorrow_end": tomorrow_end,
                        "recipient_email": email,
                        "scheduled_time": schedule_time
                    })
            except Exception as e:
                message = f"Error: {str(e)}"

    return render_template_string(
        HTML_TEMPLATE, 
        message=message, 
        report_html=report_html,
        today_hours=today_hours,
        tomorrow_hours=tomorrow_hours,
        default_today_start=default_today_start,
        default_today_end=default_today_end,
        default_tomorrow_start=default_tomorrow_start,
        default_tomorrow_end=default_tomorrow_end,
        range=range  # Make range available in template
    )

if __name__ == '__main__':
    # Start the scheduler in a background thread
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    # Run the Flask app
    app.run(debug=True, port=5000)

